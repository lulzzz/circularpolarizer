######################################################################
# Michael S 260685s<at>gmail<dot>com                                 #
#                                                                    #
# This work is licensed under the Creative Commons Attribution-Share #
# Alike License: http://creativecommons.org/licenses/by-sa/3.0/      #
#                                                                    #
######################################################################

Calculation of complex Fresnel reflection-coefficient for arbitrary
multilayers of thin solid films under soft x-ray illumination.

Ref. 'Handbook of ellipsometry' by H.G. Tompkins, E.A. Irene (Springer, 2005)

'polarizer.py' is the workhorse, it can be imported via:

> import polarizer

There are 2 classes to build the mirror structure from: Layer and Structure.  A
Structure consists at least of an ambient and a substrate layer.  An arbitrary
number of layers is supported.

To define a new layer, use e.g.:

> B4C = polarizer.Layer('B4C', complex(1-0.0283, -0.0031), 80e-9)

This generates a layer with name 'B4C', given complex refractive index, and
thickness 80nm.  The newly created layer can be accessed and referenced by the
variable name B4C.

Assuming we defined some more layers:
ambient, B4C, Mo, substrate
(ambient and substrate layer don't need their thickness defined)
we can now construct the mirror structure and generate a simple visualization:
(the layer-order goes from top to bottom)

> mirror = polarizer.Structure([ambient, B4C, Mo, substrate])
> mirror.show()

gives something like:

    ambient: vacuum
    N=1.00+0.00i
   _____________________________________________
  |    B4C: N=0.91-0.02i d=3nm                  |
  |_____________________________________________|
  |    Mo: N=0.78-0.13i d=100nm                 |
  |_____________________________________________|
  |    substrate: SiO2                          |
  |    N=0.95 -0.03i                            |
  |                                             |

If all is well, 

> mirror.fresnel(angle, energy, polarisation) 

returns the fresnel-reflection-coefficient for the whole structure under given
angle of incidence (measured from surface-normal!) and photon energy (in eV).


