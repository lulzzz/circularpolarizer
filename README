######################################################################
# Michael Schneider 260685s<at>gmail<dot>com                         #
#                                                                    #
# This work is licensed under the Creative Commons Attribution-Share #
# Alike License: http://creativecommons.org/licenses/by-sa/3.0/      #
#                                                                    #
######################################################################

Calculation of complex Fresnel reflection-coefficient for arbitrary
multilayers of thin solid films under soft x-ray illumination.

Ref. 'Handbook of ellipsometry' by H.G. Tompkins, E.A. Irene (Springer, 2005)

'polarizer2.py' is the workhorse, it can be imported via:

> import polarizer2

The mirror structure is defined by a dictionary with the following keys:
 'names'
 'index'
 'thickness'
 'energy'
with 'index' being optional.
If there is no list of complex refractive indices given ('index'), the program
tries to find data-files by the scheme './index/n_$name.dat' and get the
indexdata from there. (data format as from cxro-database)

Assuming a dictionary like this:
mirrordef = {
        'names': ['B4C', 'Mo', 'SiO2'],
        'thickness': [3, 50, -1],
        'energy': 60,
        }
(note: SiO2 is substrate, thickness is arbitrary but has to be defined)

> m = polarizer2.mirror(mirrordef)

creates mirrorobject, and

> R_s, R_p, delta = m.get_Rd(angle)

gives reflectivities and phasediff for incidence angle 'angle' (measured from
surface-normal, only if index-data-files are in place)
        

